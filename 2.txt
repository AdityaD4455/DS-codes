Operations on singly linked list 
insert a node at end
delete node from beginning
search for a given element in the list
display the list

#include <stdio.h>
#include <stdlib.h>

// Definition of a node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    
    // If the list is empty, make the new node the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    // Traverse to the last node
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Link the last node to the new node
    temp->next = newNode;
}

// Function to delete a node from the beginning
void deleteAtBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("The list is empty, cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

// Function to search for a given element in the list
int searchElement(struct Node* head, int value) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == value) {
            return 1;  // Element found
        }
        temp = temp->next;
    }
    return 0;  // Element not found
}

// Function to display the list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;  // Initialize the head of the list as NULL
    
    // Insert some nodes at the end
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    insertAtEnd(&head, 40);

    printf("Linked list after insertions: ");
    displayList(head);

    // Delete a node from the beginning
    deleteAtBeginning(&head);
    printf("Linked list after deleting the first node: ");
    displayList(head);

    // Search for an element
    int searchVal = 20;
    if (searchElement(head, searchVal)) {
        printf("Element %d found in the list.\n", searchVal);
    } else {
        printf("Element %d not found in the list.\n", searchVal);
    }

    // Final list display
    printf("Final linked list: ");
    displayList(head);

    return 0;
}






-----------------------------------------
for Doubly linked list


#include <stdio.h>
#include <stdlib.h>

// Definition of a node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);

    // If the list is empty, make the new node the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }

    // Traverse to the last node
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Link the last node to the new node
    temp->next = newNode;
    newNode->prev = temp;
}

// Function to delete a node from the beginning
void deleteAtBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("The list is empty, cannot delete.\n");
        return;
    }

    struct Node* temp = *head;
    *head = (*head)->next;

    // If the list has more than one node, set prev of new head to NULL
    if (*head != NULL) {
        (*head)->prev = NULL;
    }

    free(temp);
}

// Function to search for a given element in the list
int searchElement(struct Node* head, int value) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == value) {
            return 1;  // Element found
        }
        temp = temp->next;
    }
    return 0;  // Element not found
}

// Function to display the list
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;  // Initialize the head of the list as NULL

    // Insert nodes at the end
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    insertAtEnd(&head, 40);

    printf("Doubly Linked List after insertions: ");
    displayList(head);

    // Delete a node from the beginning
    deleteAtBeginning(&head);
    printf("Doubly Linked List after deleting the first node: ");
    displayList(head);

    // Search for an element
    int searchVal = 20;
    if (searchElement(head, searchVal)) {
        printf("Element %d found in the list.\n", searchVal);
    } else {
        printf("Element %d not found in the list.\n", searchVal);
    }

    // Final list display
    printf("Final Doubly Linked List: ");
    displayList(head);

    return 0;
}
