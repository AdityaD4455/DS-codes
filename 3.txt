Implement stack using linked list

#include <stdio.h>
#include <stdlib.h>

// Definition of a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to push an element onto the stack
void push(struct Node** top, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = *top;  // Link the new node to the previous top
    *top = newNode;        // Make the new node the top of the stack
    printf("%d pushed to stack\n", value);
}

// Function to pop an element from the stack
int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow! The stack is empty.\n");
        return -1;
    }

    struct Node* temp = *top;
    int poppedValue = temp->data;
    *top = (*top)->next;  // Move the top to the next node
    free(temp);            // Free the memory of the popped node
    return poppedValue;
}

// Function to peek at the top element of the stack
int peek(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return -1;
    }
    return top->data;
}

// Function to check if the stack is empty
int isEmpty(struct Node* top) {
    return (top == NULL);
}

// Function to display the stack
void display(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return;
    }

    struct Node* temp = top;
    printf("Stack: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* stack = NULL;  // Initialize an empty stack

    // Push elements onto the stack
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack, 40);

    // Display the stack
    display(stack);

    // Peek at the top element
    printf("Top element is %d\n", peek(stack));

    // Pop an element from the stack
    printf("%d popped from stack\n", pop(&stack));

    // Display the stack again
    display(stack);

    // Check if the stack is empty
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack is not empty.\n");
    }

    return 0;
}
