implement linear queue using array 

#include <stdio.h>
#define MAX 5  // Define maximum size of the queue

// Structure to represent a queue
struct Queue {
    int arr[MAX];
    int front, rear;
};

// Initialize the queue
void initializeQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is full
int isFull(struct Queue* q) {
    return q->rear == MAX - 1;
}

// Check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1;
}

// Add an element to the queue (enqueue)
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full, cannot enqueue %d\n", value);
    } else {
        if (q->front == -1) {  // First element to enqueue
            q->front = 0;
        }
        q->rear++;
        q->arr[q->rear] = value;
        printf("%d enqueued to the queue\n", value);
    }
}

// Remove an element from the queue (dequeue)
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty, cannot dequeue\n");
        return -1;  // Return a sentinel value indicating empty queue
    } else {
        int value = q->arr[q->front];
        if (q->front == q->rear) {  // Only one element in the queue
            q->front = -1;
            q->rear = -1;
        } else {
            q->front++;
        }
        return value;
    }
}

// Display the queue elements
void displayQueue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->arr[i]);
        }
        printf("\n");
    }
}

int main() {
    struct Queue q;
    initializeQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    displayQueue(&q);

    printf("Dequeued: %d\n", dequeue(&q));

    displayQueue(&q);

    enqueue(&q, 60);
    displayQueue(&q);

    return 0;
}
