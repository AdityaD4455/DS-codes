function in C for BFS traversal of graph

#include <stdio.h>
#include <stdlib.h>

// Define the maximum number of vertices
#define MAX_VERTICES 100

// Queue structure to hold the vertices for BFS
struct Queue {
    int items[MAX_VERTICES];
    int front, rear;
};

// Function to initialize the queue
void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1;
}

// Function to enqueue an element
void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_VERTICES - 1) {
        printf("Queue is full!\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->items[++(q->rear)] = value;
}

// Function to dequeue an element
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    }
    int item = q->items[q->front];
    if (q->front == q->rear) {
        q->front = q->rear = -1;
    } else {
        q->front++;
    }
    return item;
}

// Function to perform BFS traversal on the graph
void bfs(int graph[MAX_VERTICES][MAX_VERTICES], int start, int vertices) {
    struct Queue q;
    initQueue(&q);
    
    int visited[MAX_VERTICES] = {0};  // Array to keep track of visited vertices

    // Enqueue the start node and mark it as visited
    enqueue(&q, start);
    visited[start] = 1;

    printf("BFS traversal starting from vertex %d: ", start);

    while (!isEmpty(&q)) {
        // Dequeue a vertex and print it
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);

        // Explore the neighbors of the dequeued vertex
        for (int i = 0; i < vertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                enqueue(&q, i);
                visited[i] = 1;
            }
        }
    }

    printf("\n");
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES] = {0};
    int vertices, edges, u, v;

    // Input the number of vertices and edges
    printf("Enter number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter number of edges: ");
    scanf("%d", &edges);

    // Input the edges (u, v) where 0 <= u, v < vertices
    printf("Enter the edges (u, v):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;  // Add edge from u to v
        graph[v][u] = 1;  // Add edge from v to u (undirected graph)
    }

    // Perform BFS traversal starting from vertex 0 (or any vertex)
    bfs(graph, 0, vertices);

    return 0;
}
